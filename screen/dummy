http://192.168.43.247:8058/videos/search?query=${query}

container: {
    flex: 1,
    backgroundColor: '#2c2c2c',
    justifyContent: 'center',
    alignItems: 'center',
  },
  searchWrapper: {
    width: '80%',
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 24,
    color: 'white',
  },
  input: {
    height: 60,
    backgroundColor: '#3c3c3c',
    borderRadius: 50,
    paddingHorizontal: 10,
    color: '#fff',
    marginBottom: 16,
    width: '100%',
  },
  button: {
    backgroundColor: 'red',
    borderRadius: 40,
    paddingVertical: 10,
    alignItems: 'center',
    justifyContent: 'center',
    width: 100,
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 16,
  },





















  import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, Alert } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

const HomeScreen = () => {
  const [authToken, setAuthToken] = useState(null);
  const [userInfo, setUserInfo] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Retrieve authToken and userInfo from AsyncStorage
        const token = await AsyncStorage.getItem('authToken');
        const user = await AsyncStorage.getItem('userInfo');

        setAuthToken(token);
        setUserInfo(user ? JSON.parse(user) : null);
      } catch (error) {
        Alert.alert("Error", "Failed to retrieve data.");
      }
    };

    fetchData();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.header}>Welcome to the Home Page!</Text>
      
      {authToken && (
        <Text style={styles.tokenText}>Auth Token: {authToken}</Text>
      )}

      {userInfo ? (
        <View style={styles.userInfoContainer}>
          <Text style={styles.infoText}>Name: {userInfo.name}</Text>
          <Text style={styles.infoText}>Email: {userInfo.email}</Text>
          {/* Add other user info as needed */}
        </View>
      ) : (
        <Text style={styles.infoText}>No user info available.</Text>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  header: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  tokenText: {
    fontSize: 16,
    color: 'gray',
    marginVertical: 10,
  },
  userInfoContainer: {
    marginTop: 20,
    alignItems: 'center',
  },
  infoText: {
    fontSize: 18,
    marginVertical: 5,
  },
});

export default HomeScreen;
